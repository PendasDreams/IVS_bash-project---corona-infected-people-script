#!/bin/bash



#verificatrion of arguments
flag_operation_found=0
flag_file_found=0
flag_filter_found=0


#infected
flag_infected=0
infected_counter=0
flag_gender=0
flag_age=0
flag_daily=0
flag_monthly=0
flag_yearly=0
flag_countries=0
flag_regions=0
flag_districts=0
flag_merge=0

s_filter_argument_used=0


#arguments for functions
flag_file_entered=0
flag_operation_entered=0
a_filter_argument_used=0
b_filter_argument_used=0
g_filter_argument=0



DATETIME_regrex="[1-2][0-9][0-9][0-9]-[0-1][0-9]-[0-3][0-9]$"


declare -a arr_files=()
declare -a arr_COMMANDS=("infected" "merge" "gender" "age" "daily" "monthly" "yearly" "countries" "districts" "regions")
declare -a arr_help_legend=(
""
"###  COMMANDS  ###"
""
"infected == statistic of all infected people" 
"merge == merge multiple files into one" 
"gender == statistic of infected people for M = males and F = females" 
"age == statistic of infected people with used age"
"daily == statistic of infected people for used days"
"monthly == statistic of infected people for used months"
"yearly == statistic of infetced people for used years"
"countries == statistic of infected people in used countries"
"districts == statistic of infetcted poople in used disttricts"
"regions == statistic of infected people in used regions"
""
"### FILTERS ###"
""
"-a DATETIME == only data after this date are used"
"-b DATETIME == only data before this date are used"
"-g GENDER == only data of used gender(M = male, F = female) are used"
"-s == used with commands (gender, age, daily, monthly, yearly, countries, didstricts and regions) makes histogram of counted number"
"-h == shows legend of comands"
""
"### SYNTAX ###"
""
"corona [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]]"
""
"for more info look at the IOS proj.1"
""
)


        while getopts :a:b:g:hs arg ;do  
            case "${arg}" in
            a)
                a_filter_argument=${OPTARG}
                a_filter_argument_used=1
                if [[ "$a_filter_argument" =~ $DATETIME_regrex ]]
                    then
                        noice=1
                    else
                        echo "WRONG INPUT! for help use [-h]"
                        exit 1
                fi      
                ;;
            b)
                b_filter_argument=${OPTARG}
                b_filter_argument_used=1
                if [[ "$b_filter_argument" =~ $DATETIME_regrex ]]
                    then
                        noice=1
                    else
                        echo "WRONG INPUT! for help use [-h]"
                        exit 1
                fi  
                ;;
            g)
                g_filter_argument=${OPTARG}
                if [ "$g_filter_argument" = "M" ]; then

                    g_filter_argument=1

                elif [ "$g_filter_argument" = "Z" ]; then

                    g_filter_argument=2

                else
                    echo "WRONG INPUT! for help use [-h]"
                    exit 1
                fi
                ;;
            h)        
                echo "-h was used:"
                for f in "${arr_help_legend[@]}"; do
                    echo "$f"
                done
                exit 1
                ;;
            s)
                s_filter_argument_used=1
                ;;
            *)  
                echo "WRONG INPUT! for help use [-h]" 
                exit 1      
            esac
        done


for (( i=1; i<=$#; i++ )); do

    if [ "${!i}" = "-g" ] || [ "${!i}" = "-a" ] || [ "${!i}" = "-b" ] ||  [ "${!i}" = "-s" ] || [ "${!i}" = "-h" ]
    then


        if [ "${!i}" = "-h" ]
        then
            echo "-h was used:"
                for f in "${arr_help_legend[@]}"; do
                    echo "$f"
                done
            exit 1
        fi
        if [ $flag_operation_entered = 1 ] || [ $flag_file_found = 1 ]; then
            echo "WRONG INPUT! for help use [-h]" 
            exit 1
        fi
        if [ "${!i}" != "-s"  ]
            then
                i=$((i+1)) 
        fi
        
        flag_filter_found=1
    fi

    for j in "${arr_COMMANDS[@]}"; do
        
            if [[ "$j" = "${!i}"  && ( $flag_operation_entered = 1  ||  $fag_file_found = 1 ) ]]
            then
                echo "WRONG INPUT! for help use [-h]" 
                exit 1

            elif [ "$j" = "${!i}" ]
            then
                flag_operation_found=1
                flag_operation_entered=1

                if [ "${!i}" = "infected" ]
                then
                flag_infected=1
                elif [ "${!i}" = "merge" ]
                then
                flag_merge=1
                elif [ "${!i}" = "gender" ]
                then
                flag_gender=1
                elif [ "${!i}" = "age" ]
                then
                flag_age=1
                elif [ "${!i}" = "daily" ]
                then
                flag_daily=1
                elif [ "${!i}" = "monthly" ]
                then
                flag_monthly=1
                elif [ "${!i}" = "yearly" ]
                then
                flag_yearly=1
                elif [ "${!i}" = "countries" ]
                then
                flag_countries=1
                elif [ "${!i}" = "districts" ]
                then
                flag_districts=1
                elif [ "${!i}" = "regions" ]
                then
                flag_regions=1
                fi
                break
            fi
    done


        if [[ "${!i}" =~ .*.csv$ ]]
        then
            arr_files+=(${!i})
            file_arr_counter=$file_arr_counter+1
            flag_file_found=1
            flag_file_entered=1
        fi

        if [[ "${!i}" =~ .*.csv.gz$ ]]
        then
            v=(${!i})
            arr_files+=${v::-3}
            file_arr_counter=$file_arr_counter+1
            flag_file_found=1
            flag_file_entered=1
            gzip -d $v
        fi
         if [[ "${!i}" =~ .*.csv.bz2$ ]]
        then
            
            f=(${!i})
            arr_files+=${f::-4}
            file_arr_counter=$file_arr_counter+1
            flag_file_found=1
            flag_file_entered=1
            bzip2 -d $f
           
        fi


        if [ $flag_file_found = 0 ] && [ $flag_operation_found = 0 ] && [ $flag_filter_found = 0 ]
        then
            echo "WRONG INPUT! for help use [-h]"
            exit 1
        fi

        flag_filter_found=0
        flag_operation_found=0
        flag_file_found=0

done


##################################################################################################################################
##################################################################################################################################

if [ $flag_merge = 1 ] && [ $flag_file_entered = 0 ];then
    echo "WRONG INPUT! files for merge are missing! "
    exit 1
fi

#counter and regrex of infected people
function infected
{
    regrex_file_testing="[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12},[0-9]{4}-[0-9]{2}-[0-9]{2},[0-9]{0,2},[M-Z],.*"

    if [[ $line =~ $regrex_file_testing ]]; then
    infected_counter=$((infected_counter+1))
    fi
}


#date_time_filter

if [ $a_filter_argument_used = 0 ]; then
    a_filter_argument="2015-01-01"
fi

if [ $b_filter_argument_used = 0 ]; then
    b_filter_argument="2023-01-01"
fi


#gender filter

if [ $g_filter_argument = 0 ]; then
gender_arg_1="M"
gender_arg_2="Z"
fi
if [ $g_filter_argument = 1 ]; then
gender_arg_1="M"
gender_arg_2="M"
fi
if [ $g_filter_argument = 2 ]; then
gender_arg_1="Z"
gender_arg_2="Z"
fi






if [ $flag_file_entered = 1 ];then

    len=${#arr_files[@]}

fi
if [ $flag_file_entered = 0 ];then

    len=1

fi



if [ $flag_merge = 1 ]; then

        if [ $s_filter_argument_used = 1 ];then
            echo "ERROR! -s filter doesnt support this argument "
            exit 1;
        fi

        if [ $len = 0 ];then
            echo "ERROR! only one file was used"
            exit 1
        fi

        for ((p = 1; p < ${#arr_files[@]}; p++)); do
        file="${arr_files[$p]}"
            tail -n +2 $file >> $arr_files 
        done

fi




    for (( i=0; i<$len; i++ )); do 

        

        if [ $flag_file_entered = 1 ];then
        
        input="${arr_files[$i]}"

        awk_out=`awk -F"," '$2 >= a_filter_argument && $2 <= b_filter_argument && ($4 == gender_arg_1 || $4 == gender_arg_2) {print $0}' a_filter_argument=$a_filter_argument b_filter_argument=$b_filter_argument gender_arg_1=$gender_arg_1 gender_arg_2=$gender_arg_2 $input`

       fi

        if [ $flag_file_entered = 0  ]; then
        awk_out=`awk -F"," '$2 >= a_filter_argument && $2 <= b_filter_argument && ($4 == gender_arg_1 || $4 == gender_arg_2) {print $0}' a_filter_argument=$a_filter_argument b_filter_argument=$b_filter_argument gender_arg_1=$gender_arg_1 gender_arg_2=$gender_arg_2 `
       fi

      

        while read awk_out; do

        infected_counter=$((infected_counter+1))

        if [ $flag_operation_entered = 0 ]; then
            echo $awk_out
        fi

        

        if [ $flag_gender = 1 ]; then
            echo pocet nakazenych zen a muzu: 
            gender_awk=`awk '/,Z,/ {count1++} 
            BEGIN{
                    count1="None"
                    count2="None"
            }  
            
            END{
                if ( s_filter_argument_used == 0 ){
                    print "Z: " count1 "\n"
                    printf "\n"
                }
                if ( s_filter_argument_used == 1 ){

                    for( i = 0; i <= count1; i++){
                        y++;
                        if( y == 100000){
                            y=0;
                            hash_counter++;
                        }
                    }
                    printf "Z: " 
                        for(i=0;i<hash_counter;i++){
                            printf"#";
                        }
                    }
                } 
            /,M,/ {count2++} 
            
            END{
                if ( s_filter_argument_used == 0 ){
                print "M: " count2
                }
                if ( s_filter_argument_used == 1 ){

                    for( i = 0; i <= count2; i++){
                        y++;
                        if( y == 100000){
                            y=0;
                            hash_counters++;
                        }
                    }
                    printf " \n M: " 
                        for(i=1;i<hash_counters;i++){
                            printf"#";
                        }
                    }
                }'    s_filter_argument_used=$s_filter_argument_used                                       `
            echo $gender_awk
            echo $var2
        fi
        if [ $flag_age = 1 ]; then
            awk -F"," '{
                    if ($3 <=5 && $3 >=0)
                        count5++;    

                    if ($3 <=15 && $3 >=6)
                        count15++;    

                     if ($3 <=25 && $3 >=16)
                        count25++;    

                     if ($3 <=35 && $3 >=26)
                        count35++;

                    if ($3 <=45 && $3 >=36)
                        count45++;

                     if ($3 <=55 && $3 >=46)
                        count55++;    

                     if ($3 <=65 && $3 >=56)
                        count65++;    

                     if ($3 <=75 && $3 >=66)
                        count75++;    

                     if ($3 <=85 && $3 >=76)
                        count85++;    

                     if ($3 <=95 && $3 >=86)

                     if ($3 <=105 && $3 >=96)
                        count105++;    

                     if ($3 >=106)
                        count106++; 

                    if (count5 == 0)
                        count5="None";
                    
                    if (count15 == 0)
                        count15="None";
                    
                    if (count25 == 0)
                        count25="None";

                    if (count35 == 0)
                        count35="None";

                    if (count45 == 0)
                        count45="None";

                    if (count55 == 0)
                        count55="None";

                    if (count65 == 0)
                        count65="None";

                    if (count75 == 0)
                        count75="None";

                    if (count85 == 0)
                        count85="None";

                    if (count95 == 0)
                        count95="None";

                    if (count105 == 0)
                        count105="None";

                    if (count106 == 0)
                        count106="None";
                    }
                    END {
                        if (s_filter_argument_used == 0 ){
                         print "0-5:\t" count5 "\n" "6-15:\t" count15 "\n" "16-25:\t" count25 "\n" "26-35:\t" count35 "\n" "36-45:\t" count45 "\n" "46-55:\t" count55 "\n" "56-65:\t" count65 "\n" "66-75:\t" count75 "\n" "76-85:\t" count85 "\n" "86-95:\t" count95 "\n" "96-105:\t" count105 "\n" ">105:\t" count106 
                        }

                        age_arr[0]="0-5:\t"; age_arr[1]="6-15:\t"; age_arr[2]="16-25:\t";age_arr[3]="26-35:\t";age_arr[4]="36-45:\t";age_arr[5]="46-55:\t";age_arr[6]="56-65:\t";age_arr[7]="66-75:\t";age_arr[8]="76-85:\t";age_arr[9]="86-95:\t";age_arr[10]="96-105:\t";age_arr[11]=">105:\t";
                        count_arr[0]= count5; count_arr[1]= count15; count_arr[2]= count25;count_arr[3]= count35;count_arr[4]= count45;count_arr[5]= count55;count_arr[6]= count65;count_arr[7]= count75;count_arr[8]= count85;count_arr[9]= count95;count_arr[10]= count105;count_arr[11]= count106;

                        if ( s_filter_argument_used == 1 ){
                            for(i=0; i<= 11; i++){
                                printf age_arr[i];

                                for(x=0;x<count_arr[i];x++){
                                    if(count_arr[i] == "None"){
                                        break;
                                    }
                                    counteris++
                                    if(counteris == 10000){
                                    printf "#";
                                    counteris=0
                                    }
                                }
                            counteris=0
                            printf "\n"
                            }
                        }
                         }
                    ' s_filter_argument_used=$s_filter_argument_used
        fi 
        if [ $flag_daily = 1 ]; then
            awk -F"," '
            {
                counter_for_days++;
                
                if ( current_day != $2 ){
                    day_counter_arr[y++] = counter_for_days;
                    counter_for_days = 0
                    current_day=$2;
                    swich_counter++;
                    swichday_arr[++i] = current_day;
                }
            } 

            END {
                if(s_filter_argument_used == 0)
                {   
                    day_counter_arr[1] += 1;
                    day_counter_arr[y++] = counter_for_days + 1 ;    

                    for (x = 1; x <= swich_counter; x++)
                        print swichday_arr[x]": ", day_counter_arr[x]
                }
                if (s_filter_argument_used == 1)
                {
                    day_counter_arr[1]+=1;
                    day_counter_arr[y++] = counter_for_days + 1 ;  

                     for (x = 1; x <= swich_counter; x++){

                        printf swichday_arr[x]": ";

                        for(i=0;i<day_counter_arr[x];i++){
                                    counteris++;
                                    if(counteris == 50){
                                    printf "#";
                                    counteris=0;
                                    }
                                counteris=0;    
                                }
                        printf "\n"
                     }
                       
                }
                



            }' s_filter_argument_used=$s_filter_argument_used
        fi
        if [ $flag_monthly = 1 ]; then
            awk -F"," '
            {

            split($2,a,"-");

            ++number_date_counter;

            if ( a[1] != current_year ||  a[2] != current_month ){
                current_month=a[2]
                current_year=a[1]

                number_date_arr[o++] = number_date_counter;
                number_date_counter = 0;

                swich_counter++;
                
                year_arr[d++]=a[1];
                month_arr[l++]=a[2];

                }
            } 

            END {

                if(s_filter_argument_used == 0)
                {
                number_date_arr[1]+=1;
                number_date_arr[swich_counter]=number_date_counter+1;

                for (x = 0; x < swich_counter; x++)
                    print month_arr[x] "-"year_arr[x] ": " number_date_arr[x+1]
                }

                if (s_filter_argument_used == 1)
                {
                    number_date_arr[1]+=1;
                    number_date_arr[swich_counter]=number_date_counter+1;

                     for (x = 0; x < swich_counter; x++){

                        printf month_arr[x] "-"year_arr[x] ": ";

                        for(i=0;i<number_date_arr[x+1];i++){
                                    counteris++;
                                    if(counteris == 10000){
                                    printf "#";
                                    counteris=0
                                    }
                                    
                                }
                        counteris=0
                        printf "\n"
                     }    
                }
            }' s_filter_argument_used=$s_filter_argument_used
        fi
        if [ $flag_yearly = 1 ]; then
            awk -F"," '
            {

            split($2,a,"-");

            ++number_date_counter;

            if ( a[1] != current_year ){
                current_year=a[1]

                number_date_arr[o++] = number_date_counter;
                number_date_counter = 0;

                swich_counter++;
                
                year_arr[d++]=a[1];

                }
            } 

            END {
                if(s_filter_argument_used == 0)
                {
                number_date_arr[1]+=1;
                number_date_arr[d++]=number_date_counter+1;

                for (x = 0; x < swich_counter; x++)
                    print year_arr[x] ": " number_date_arr[x+1]
                }
                if (s_filter_argument_used == 1)
                {
                    number_date_arr[1]+=1;
                    number_date_arr[swich_counter]=number_date_counter+1;

                     for (x = 0; x < swich_counter; x++){

                        printf year_arr[x] ": ";

                        for(i=0;i<number_date_arr[x+1];i++){
                                    counteris++;
                                    if(counteris == 100){
                                    printf "#";
                                    counteris=0
                                    }        
                                }
                                counteris=0
                        printf "\n"
                     }    
                }




            }' s_filter_argument_used=$s_filter_argument_used
        fi
        if [ $flag_countries = 1 ]; then
            awk -F"," '
            {

            if($8 != "" )
            {
                current_country=$8

                found_flag = 0

                    for (i = 0; i <= NF; i++ ){

                        if (country_arr[i] == current_country){
                            found_flag = 1;
                            counter_arr[i] += 1
                        }

                        if( i == NF && found_flag == 0){
                            country_arr[a++]=current_country;
                            counter_arr[l++]=1;
                        }
                    }

                }

            }
            END {

                if(s_filter_argument_used == 0)
                {
                    counter_arr[0]+=1;
                    for (x = 0; x <= NF; x++)
                        print country_arr[x] ": " counter_arr[x]
                }
                if(s_filter_argument_used == 1)
                {
                    counter_arr[0]+=1;
                     for (x = 0; x <= NF; x++){

                        printf country_arr[x] ": "

                        for(i=0; i < counter_arr[x]; i++){
                            counteris++;
                            if(counteris == 100){
                                printf "#";
                                counteris=0
                            }
                        }
                        printf "\n"
                     }
                }

            }' s_filter_argument_used=$s_filter_argument_used
        fi

        if [ $flag_regions = 1 ]; then
            awk -F"," '
            BEGIN{
                    for(i = 0; i<= 14; i++){
                        counter_arr[i]= " None";
                    }
            }  
            {

                NUT_arr[0]="CZ010"       #Hlavní město Praha
                NUT_arr[1]="CZ020"       #Středočeský kraj
                NUT_arr[2]="CZ031"       #Jihočeský kraj
                NUT_arr[3]="CZ032"       #Plzeňský kraj
                NUT_arr[4]="CZ041"       #Karlovarský kraj
                NUT_arr[5]="CZ042"       #Ústecký kraj
                NUT_arr[6]="CZ051"       #Liberecký kraj
                NUT_arr[7]="CZ052"       #Královéhradecký kraj
                NUT_arr[8]="CZ053"       #Pardubický kraj
                NUT_arr[9]="CZ063"       #Kraj Vysočina
                NUT_arr[10]="CZ064"      #Jihomoravský kraj
                NUT_arr[11]="CZ071"      #Olomoucký kraj
                NUT_arr[12]="CZ072"      #Zlínský kraj
                NUT_arr[13]="CZ080"      #Moravskoslezský kraj
                NUT_arr[14]="None "

                flag_found=1

                for (i = 0; i <= NF; i++ ){

                        if (NUT_arr[i] == $5){
                            counter_arr[i] += 1;
                        }
                        if ( $5 == "" ){
                            counter_arr[14]+= 1
                            
                        }

                    }

            }
             END {

                if(s_filter_argument_used == 0)
                    {   
                    for (x = 0; x <= 14; x++)
                        print NUT_arr[x] ": " counter_arr[x]
                    }
                if(s_filter_argument_used == 1)
                    { 
                     
                     for (x = 0; x <= 14; x++){
                        printf NUT_arr[x] ": "
                        for(i=0; i < counter_arr[x]; i++){

                            if(counter_arr[x] == "None"){
                                break
                            }
                            counteris++;
                            if(counteris == 10000){
                                printf "#";
                                counteris=0
                            }
                        }
                        counteris=0
                        printf "\n"
                    }
                    
                     }
            }' s_filter_argument_used=$s_filter_argument_used
        fi
        if [ $flag_districts = 1 ]; then
            awk -F"," '
            BEGIN{
                    Nonecounter="None"
            } 
            {
                current_region=$6

                found_flag = 0

                    for (i = 0; i <= NF; i++ ){

                        if ( $6 == "" ){
                            Nonecounter+=1;
                            break;
                        }
                        if (region_arr[i] == current_region){
                            found_flag = 1;
                            counter_arr[i] += 1
                        }
                        if( i == NF && found_flag == 0){
                            region_arr[a++]=current_region;
                            counter_arr[l++]=1;
                        }
                    }
                }

            END {
                if(s_filter_argument_used == 0){
                    for (x = 0; x <= NF; x++){
                        print region_arr[x] ": " counter_arr[x]
                    }
                print "None:\t" Nonecounter
                }
                if(s_filter_argument_used == 1){
                    
                for (x = 0; x <= NF; x++){
                        printf region_arr[x] ": "
                        for(i=0; i < counter_arr[x]; i++){

                            if(counter_arr[x] == "None"){
                                break
                            }
                            counteris++;
                            if(counteris == 1000){
                                printf "#";
                                counteris=0
                            }
                        }
                        counteris=0
                        printf "\n"

                    }
                printf "None:\t";
                for(i=0; i < Nonecounter; i++){
                            counterisz++;
                            if(counterisz == 1000){
                                printf "#";
                                counterisz=0
                            }

                 }
                 printf "\n"
                
                }
               
                     
            }' s_filter_argument_used=$s_filter_argument_used
        fi

        
    

        done <<< $awk_out
    done





    if [ $flag_infected = 1 ]; then

        if [ $s_filter_argument_used = 1 ];then
            echo "ERROR! -s filter doesnt support this argument "
            exit 1;
        fi
       echo pocet nakazenych: $infected_counter 
    fi








